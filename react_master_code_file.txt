React.js Project Code Archive
Generated on: 2025-02-13 17:09:18
==================================================


TypeScript React Components
==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhi_bot/bodhi-landing/src/app/components/BodhiChat.tsx
--------------------------------------------------

'use client';

import React, { useState, useEffect, useRef } from 'react';
import { Activity, Bot, Send, User } from 'lucide-react';
import ReactMarkdown from 'react-markdown';
import remarkGfm from 'remark-gfm';
import { Components } from 'react-markdown';
import { Light as SyntaxHighlighter } from 'react-syntax-highlighter';

// Type definitions
interface Message {
    role: 'user' | 'assistant' | 'system';
    content: string;
}

interface MessageProps {
    msg: Message;
    isUser: boolean;
}

interface FormattedMessage {
    thinking: string | null;
    mainContent: string;
}

// Configuration
const API_ENDPOINT = "https://ai-aihub2573706963054.services.ai.azure.com/models/chat/completions";
const API_KEY = "4ZKiVgYHfBBHIHijqHMVtE6xh5ABLfFslHtElxGLuMZwRL839BI2JQQJ99BBACYeBjFXJ3w3AAAAACOGpNZC";
const MODEL_NAME = "DeepSeek-R1";

// Example prompts
const EXAMPLE_PROMPTS = [
    "Can you explain quantum computing in simple terms?",
    "Help me optimize this Python code for better performance",
    "Analyze the environmental impact of electric vehicles",
    "Design a system architecture for a social media platform",
    "Write a research proposal on AI safety"
];

// Format message content with proper typing
const formatMessageContent = (content: string = ''): FormattedMessage => {
    const thinkingMatch = content.match(/<think>(.*?)<\/think>/s);
    const thinking = thinkingMatch ? thinkingMatch[1].trim() : null;
    const mainContent = content.replace(/<think>.*?<\/think>/s, '').trim();
    return { thinking, mainContent };
};

// Message component with proper typing
const Message: React.FC<MessageProps> = ({ msg, isUser }) => {
    const { thinking, mainContent } = formatMessageContent(msg.content);

    const components: Components = {
        code: React.memo(({ className, children, ...props }: any) => {
            const match = /language-(\w+)/.exec(className || '');
            const isInline = !match;
            
            return isInline ? (
                <code className="bg-gray-200 rounded px-1 py-0.5" {...props}>
                    {children}
                </code>
            ) : (
                <div className="rounded-md bg-gray-800 p-4 my-2">
                    <SyntaxHighlighter
                        language={match[1]}
                        customStyle={{
                            background: 'transparent',
                            padding: 0,
                            margin: 0,
                        }}
                    >
                        {String(children).replace(/\n$/, '')}
                    </SyntaxHighlighter>
                </div>
            );
        })
    };
    
    return (
        <div className={`flex gap-3 ${isUser ? 'justify-end' : 'justify-start'}`}>
            <div className={`flex gap-3 max-w-[80%] ${isUser ? 'flex-row-reverse' : ''}`}>
                <div className={`w-8 h-8 rounded-full flex items-center justify-center ${
                    isUser ? 'bg-orange-500' : 'bg-gray-300'
                }`}>
                    {isUser ? (
                        <User className="w-5 h-5 text-white" />
                    ) : (
                        <Bot className="w-5 h-5 text-gray-800" />
                    )}
                </div>
                <div className="flex flex-col gap-2">
                    {thinking && (
                        <div className="bg-orange-50 rounded-lg p-3 text-gray-800 italic text-sm border border-orange-100">
                            ü§î Thinking: {thinking}
                        </div>
                    )}
                    <div className={`rounded-lg p-3 ${
                        isUser 
                            ? 'bg-orange-500 text-white'
                            : 'bg-gray-100 text-gray-900'
                    }`}>
                        <div className="prose max-w-none">
                            <ReactMarkdown
                                remarkPlugins={[remarkGfm]}
                                components={components}
                            >
                                {mainContent}
                            </ReactMarkdown>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
};

// Main Chat component
const BodhiChat: React.FC = () => {
    const [messages, setMessages] = useState<Message[]>([]);
    const [input, setInput] = useState<string>('');
    const [isLoading, setIsLoading] = useState<boolean>(false);
    const [selectedPrompt, setSelectedPrompt] = useState<string>('');
    const messagesEndRef = useRef<HTMLDivElement | null>(null);

    useEffect(() => {
        messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
    }, [messages]);

    useEffect(() => {
        if (selectedPrompt) {
            setInput(selectedPrompt);
            setSelectedPrompt('');
        }
    }, [selectedPrompt]);

    const handleSubmit = async (e: React.FormEvent) => {
        e.preventDefault();
        
        if (!input.trim()) return;

        const newMessage: Message = { role: 'user', content: input };
        setMessages(prev => [...prev, newMessage]);
        setInput('');
        setIsLoading(true);

        try {
            const systemPrompt: Message = {
                role: 'system',
                content: `You are Bodhi AI, the world's most advanced reasoning model. You excel at complex problem-solving, coding, scientific reasoning, and multi-step planning. You have a 132K context window and surpass other models in reasoning capabilities. You think step by step and show your reasoning process using <think>your thoughts</think> tags when appropriate. 

Always maintain high standards in:
1. Detailed step-by-step reasoning
2. Scientific accuracy
3. Code quality and best practices
4. Logical analysis
5. Creative problem-solving

Your responses should be:
1. Well-structured using markdown
2. Include code blocks with proper syntax highlighting when relevant
3. Show clear thinking processes
4. Provide comprehensive explanations`
            };

            const response = await fetch(API_ENDPOINT, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'api-key': API_KEY
                },
                body: JSON.stringify({
                    messages: [systemPrompt, ...messages, newMessage],
                    max_tokens: 4000,
                    temperature: 0.7,
                    stream: true,
                    model: MODEL_NAME
                })
            });

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            if (!response.body) {
                throw new Error('Response body is null');
            }

            const reader = response.body.getReader();
            const decoder = new TextDecoder();
            let accumulatedContent = '';

            setMessages(prev => [...prev, { role: 'assistant', content: '' }]);
            setIsLoading(false);

            while (true) {
                const { done, value } = await reader.read();
                if (done) break;

                const chunk = decoder.decode(value);
                const lines = chunk.split('\n');

                for (const line of lines) {
                    if (line.startsWith('data: ')) {
                        try {
                            if (line.includes('[DONE]')) continue;

                            const jsonData = JSON.parse(line.slice(6));
                            const content = jsonData.choices?.[0]?.delta?.content || '';

                            if (content) {
                                accumulatedContent += content;
                                setMessages(prev => {
                                    const newMessages = [...prev];
                                    newMessages[newMessages.length - 1].content = accumulatedContent;
                                    return newMessages;
                                });
                            }
                        } catch (error) {
                            console.debug('Skipping malformed JSON chunk');
                        }
                    }
                }
            }

        } catch (error) {
            console.error('API Error:', error);
            setMessages(prev => [...prev, {
                role: 'assistant',
                content: `‚ö†Ô∏è Error: ${error instanceof Error ? error.message : 'Unknown error'}`
            }]);
            setIsLoading(false);
        }
    };

    return (
        <div className="w-full h-[600px] bg-white rounded-lg shadow-lg flex flex-col">
            {/* Header */}
            <div className="flex items-center justify-between p-4 border-b">
                <div className="flex items-center gap-2">
                    <Bot className="w-6 h-6 text-orange-500" />
                    <h2 className="text-lg font-semibold">Bodhi AI</h2>
                    <span className="text-xs bg-orange-100 text-orange-800 px-2 py-1 rounded-full">
                        132K Context
                    </span>
                </div>
            </div>

            {/* Messages Area */}
            <div className="flex-1 overflow-y-auto p-4 space-y-4">
                {messages.length === 0 ? (
                    <div className="space-y-6">
                        <div className="text-center text-gray-500 mt-8">
                            <Bot className="w-12 h-12 mx-auto mb-4 text-orange-500" />
                            <p className="mb-4">Experience the world's most advanced reasoning model</p>
                        </div>

                        {/* Example Prompts */}
                        <div className="space-y-2">
                            <p className="text-sm text-gray-700 font-medium">Try asking:</p>
                            {EXAMPLE_PROMPTS.map((prompt, index) => (
                                <button
                                    key={index}
                                    onClick={() => setSelectedPrompt(prompt)}
                                    className="block w-full text-left p-2 text-sm text-gray-800 hover:bg-gray-100 rounded-lg border border-gray-200"
                                >
                                    "{prompt}"
                                </button>
                            ))}
                        </div>
                    </div>
                ) : (
                    messages.map((msg, index) => (
                        <Message 
                            key={index} 
                            msg={msg} 
                            isUser={msg.role === 'user'} 
                        />
                    ))
                )}
                {isLoading && (
                    <div className="flex gap-3">
                        <div className="w-8 h-8 rounded-full bg-gray-300 flex items-center justify-center">
                            <Bot className="w-5 h-5 text-gray-800" />
                        </div>
                        <div className="flex gap-1 items-center bg-orange-50 rounded-lg p-3 border border-orange-100">
                            <Activity className="w-4 h-4 animate-spin text-orange-600" />
                            <span className="text-gray-800">Thinking...</span>
                        </div>
                    </div>
                )}
                <div ref={messagesEndRef} />
            </div>

            {/* Input Area */}
            <form onSubmit={handleSubmit} className="border-t p-4">
                <div className="flex gap-2">
                    <input
                        type="text"
                        value={input}
                        onChange={(e) => setInput(e.target.value)}
                        placeholder="Ask anything..."
                        className="flex-1 p-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-orange-500"
                        disabled={isLoading}
                    />
                    <button
                        type="submit"
                        disabled={isLoading || !input.trim()}
                        className={`px-4 py-2 rounded-lg flex items-center gap-2 ${
                            isLoading || !input.trim()
                                ? 'bg-gray-200 text-gray-400 cursor-not-allowed'
                                : 'bg-orange-500 text-white hover:bg-orange-600'
                        }`}
                    >
                        <Send className="w-4 h-4" />
                        Send
                    </button>
                </div>
            </form>
        </div>
    );
};

export default BodhiChat;

==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhi_bot/bodhi-landing/src/app/components/LandingPage.tsx
--------------------------------------------------

'use client';

import React from 'react';
import { Brain, Sparkles, Zap, Youtube, Network, Cpu, Workflow, GitBranch, Scale } from 'lucide-react';

interface LandingPageProps {
    onChatOpen: () => void;
}

interface ReasoningCardProps {
    title: string;
    features: string[];
    highlighted?: boolean;
}

interface FeatureCardProps {
    icon: React.ReactNode;
    title: string;
    description: string;
}

const FeatureCard: React.FC<FeatureCardProps> = ({ icon, title, description }) => {
    return (
        <div className="bg-white p-6 rounded-lg hover:shadow-lg transition-shadow border border-gray-100">
            <div className="text-orange-500 mb-4">{icon}</div>
            <h3 className="text-xl font-semibold mb-3 text-gray-900">{title}</h3>
            <p className="text-gray-600">{description}</p>
        </div>
    );
};

const ReasoningCard: React.FC<ReasoningCardProps> = ({ title, features, highlighted = false }) => {
    return (
        <div className={`p-6 rounded-lg shadow-lg ${highlighted ? 'bg-orange-500 text-white' : 'bg-white text-gray-600'}`}>
            <h3 className={`text-xl font-semibold mb-6 ${highlighted ? 'text-white' : 'text-gray-900'}`}>
                {title}
            </h3>
            <ul className="space-y-4">
                {features.map((feature, index) => (
                    <li key={index} className="flex items-center">
                        <span className="mr-2">‚úì</span>
                        {feature}
                    </li>
                ))}
            </ul>
        </div>
    );
};

const LandingPage: React.FC<LandingPageProps> = ({ onChatOpen }) => {
    return (
        <div className="min-h-screen bg-white text-gray-900">
            {/* Navigation Bar */}
            <nav className="border-b border-gray-100 bg-white">
                <div className="container mx-auto px-6 py-4">
                    <div className="flex items-center justify-between">
                        <div className="flex items-center">
                            <a href="/" className="text-2xl font-bold text-gray-900 flex items-center">
                                <span className="text-orange-500">Bodhi</span>AI
                            </a>
                        </div>
                        <div className="flex items-center space-x-4">
                            <button className="text-gray-600 hover:text-orange-500 px-4 py-2 rounded-lg transition-colors">
                                Documentation
                            </button>
                            <button className="text-gray-600 hover:text-orange-500 px-4 py-2 rounded-lg transition-colors">
                                About
                            </button>
                            <button className="border border-orange-500 text-orange-500 hover:bg-orange-50 px-4 py-2 rounded-lg transition-colors">
                                Log In
                            </button>
                            <button className="bg-orange-500 hover:bg-orange-600 text-white px-4 py-2 rounded-lg transition-colors">
                                Sign Up
                            </button>
                        </div>
                    </div>
                </div>
            </nav>

            {/* Hero Section */}
            <header className="container mx-auto px-6 py-20">
                <div className="text-center">
                    <div className="mb-6">
                        <span className="bg-orange-50 text-orange-500 px-4 py-1 rounded-full text-sm font-semibold">
                            World's Most Advanced Reasoning Model
                        </span>
                    </div>
                    <h1 className="text-6xl font-bold mb-6 text-gray-900">Bodhi AI</h1>
                    <p className="text-2xl text-gray-600 mb-4 max-w-3xl mx-auto">
                        Setting New Global Standards in AI Reasoning
                    </p>
                    <p className="text-lg text-orange-500 mb-8">Made with ‚ù§Ô∏è in Jaipur, India</p>
                    <div className="flex justify-center items-center space-x-8 mb-12">
                        <div className="text-center">
                            <div className="text-4xl font-bold text-gray-900">Unmatched</div>
                            <div className="text-gray-600">Reasoning Depth</div>
                        </div>
                        <div className="text-center">
                            <div className="text-4xl font-bold text-gray-900">132K</div>
                            <div className="text-gray-600">Context Window</div>
                        </div>
                        <div className="text-center">
                            <div className="text-4xl font-bold text-gray-900">Global</div>
                            <div className="text-gray-600">#1 in Benchmarks</div>
                        </div>
                    </div>
                    <div className="flex justify-center gap-4">
                        <button 
                            onClick={onChatOpen}
                            className="bg-orange-500 hover:bg-orange-600 text-white font-bold py-3 px-8 rounded-lg text-lg transition-colors"
                        >
                            Experience Superior Reasoning
                        </button>
                        <button className="border border-orange-500 hover:bg-orange-50 text-orange-500 font-bold py-3 px-8 rounded-lg text-lg transition-colors">
                            View Documentation
                        </button>
                    </div>
                </div>
            </header>

            {/* Global Leadership Section */}
            <section className="py-20 bg-gray-50">
                <div className="container mx-auto px-6">
                    <h2 className="text-3xl font-bold text-center mb-4">Global Leadership in AI Reasoning</h2>
                    <p className="text-center text-gray-600 mb-12 max-w-2xl mx-auto">
                        Surpassing every benchmark and setting new standards in AI reasoning capabilities
                    </p>
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
                        <ReasoningCard 
                            title="Unmatched Reasoning"
                            features={[
                                "Superior problem decomposition",
                                "Advanced hypothesis testing",
                                "Multi-step logical analysis",
                                "Dynamic reasoning paths"
                            ]}
                        />
                        <ReasoningCard 
                            title="Global Innovation"
                            features={[
                                "Beyond O3 capabilities",
                                "Surpassing DeepSeek R1",
                                "Revolutionary architecture",
                                "Breakthrough performance"
                            ]}
                        />
                        <ReasoningCard 
                            title="Unique Capabilities"
                            features={[
                                "Video content analysis",
                                "Multimodal reasoning",
                                "Extended context processing",
                                "Advanced code synthesis"
                            ]}
                            highlighted={true}
                        />
                    </div>
                </div>
            </section>

            {/* Core Capabilities */}
            <section className="py-20 bg-white">
                <div className="container mx-auto px-6">
                    <h2 className="text-3xl font-bold text-center mb-4">World-Leading Capabilities</h2>
                    <p className="text-center text-gray-600 mb-12 max-w-2xl mx-auto">
                        Setting global standards in AI reasoning and problem-solving
                    </p>
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
                        <FeatureCard 
                            icon={<Brain className="w-8 h-8" />}
                            title="Superior Reasoning"
                            description="Unmatched problem-solving capabilities exceeding all current models"
                        />
                        <FeatureCard 
                            icon={<GitBranch className="w-8 h-8" />}
                            title="Advanced Code Generation"
                            description="State-of-the-art code synthesis with deep architectural understanding"
                        />
                        <FeatureCard 
                            icon={<Youtube className="w-8 h-8" />}
                            title="Video Analysis"
                            description="Revolutionary capability to reason about video content"
                        />
                        <FeatureCard 
                            icon={<Workflow className="w-8 h-8" />}
                            title="Strategic Planning"
                            description="Unparalleled multi-step planning and optimization"
                        />
                        <FeatureCard 
                            icon={<Scale className="w-8 h-8" />}
                            title="Adaptive Intelligence"
                            description="Dynamic reasoning depth adjustments for optimal results"
                        />
                        <FeatureCard 
                            icon={<Network className="w-8 h-8" />}
                            title="Transparent Thinking"
                            description="Clear chain-of-thought processes for complete understanding"
                        />
                    </div>
                </div>
            </section>

            {/* Performance Comparison */}
            <section className="py-20 bg-orange-50">
                <div className="container mx-auto px-6 text-center">
                    <h2 className="text-4xl font-bold mb-8 text-gray-900">Setting Global Standards</h2>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-8 max-w-4xl mx-auto">
                        <div className="bg-white p-6 rounded-lg shadow-lg">
                            <h3 className="text-xl font-bold mb-4 text-gray-900">Beyond Current Leaders</h3>
                            <ul className="text-left space-y-3 text-gray-600">
                                <li className="flex items-center">
                                    <Sparkles className="w-5 h-5 mr-2 text-orange-500" />
                                    Surpassing O3 in Reasoning Depth
                                </li>
                                <li className="flex items-center">
                                    <Sparkles className="w-5 h-5 mr-2 text-orange-500" />
                                    Exceeding DeepSeek R1 Performance
                                </li>
                                <li className="flex items-center">
                                    <Sparkles className="w-5 h-5 mr-2 text-orange-500" />
                                    Leading in Global Benchmarks
                                </li>
                            </ul>
                        </div>
                        <div className="bg-white p-6 rounded-lg shadow-lg">
                            <h3 className="text-xl font-bold mb-4 text-gray-900">Revolutionary Features</h3>
                            <ul className="text-left space-y-3 text-gray-600">
                                <li className="flex items-center">
                                    <Zap className="w-5 h-5 mr-2 text-orange-500" />
                                    First-Ever Video Reasoning
                                </li>
                                <li className="flex items-center">
                                    <Zap className="w-5 h-5 mr-2 text-orange-500" />
                                    Superior Multimodal Analysis
                                </li>
                                <li className="flex items-center">
                                    <Zap className="w-5 h-5 mr-2 text-orange-500" />
                                    Breakthrough Context Processing
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>
            </section>

            {/* Call to Action */}
            <section className="py-20 bg-gray-50">
                <div className="container mx-auto px-6 text-center">
                    <h2 className="text-4xl font-bold mb-6 text-gray-900">Experience the Future of AI Reasoning</h2>
                    <p className="text-xl mb-8 max-w-2xl mx-auto text-gray-600">
                        Join global leaders using the world's most advanced reasoning model
                    </p>
                    <button 
                        onClick={onChatOpen}
                        className="bg-orange-500 hover:bg-orange-600 text-white font-bold py-3 px-8 rounded-lg text-lg transition-colors"
                    >
                        Get Started
                    </button>
                </div>
            </section>

            {/* Footer */}
            <footer className="bg-white py-8 border-t border-gray-100">
                <div className="container mx-auto px-6 text-center">
                    <p className="text-lg text-orange-500 mb-2">Made with ‚ù§Ô∏è in Jaipur, India üáÆüá≥</p>
                    <p className="text-gray-600">¬© 2025 Bodhi AI. All rights reserved.</p>
                </div>
            </footer>
        </div>
    );
};

export default LandingPage;

==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhi_bot/bodhi-landing/src/app/layout.tsx
--------------------------------------------------

import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        {children}
      </body>
    </html>
  );
}


==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhi_bot/bodhi-landing/src/app/page.tsx
--------------------------------------------------

'use client';

import React, { useState } from 'react';
import LandingPage from './components/LandingPage';
import BodhiChat from './components/BodhiChat';

export default function Home() {
  const [showChat, setShowChat] = useState(false);
  
  return (
    <main>
      <LandingPage onChatOpen={() => setShowChat(true)} />
      
      {/* Chat Modal */}
      {showChat && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="w-full max-w-4xl">
            <div className="relative">
              <button
                onClick={() => setShowChat(false)}
                className="absolute -top-2 -right-2 bg-white text-gray-800 rounded-full w-8 h-8 flex items-center justify-center hover:bg-gray-100 focus:outline-none z-10"
              >
                ‚úï
              </button>
              <BodhiChat />
            </div>
          </div>
        </div>
      )}
    </main>
  );
}

==================================================


JavaScript Files
==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhi_bot/bodhi-landing/tailwind.config.js
--------------------------------------------------

/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    './src/pages/**/*.{js,ts,jsx,tsx,mdx}',
    './src/components/**/*.{js,ts,jsx,tsx,mdx}',
    './src/app/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}


==================================================


TypeScript Files
==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhi_bot/bodhi-landing/next-env.d.ts
--------------------------------------------------

/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/app/api-reference/config/typescript for more information.


==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhi_bot/bodhi-landing/next.config.ts
--------------------------------------------------

import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  /* config options here */
};

export default nextConfig;


==================================================


CSS Files
==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhi_bot/bodhi-landing/src/app/globals.css
--------------------------------------------------

@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --background: #ffffff;
  --foreground: #171717;
}

@media (prefers-color-scheme: dark) {
  :root {
    --background: #0a0a0a;
    --foreground: #ededed;
  }
}

body {
  color: var(--foreground);
  background: var(--background);
  font-family: Arial, Helvetica, sans-serif;
}


==================================================


Configuration Files
==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhi_bot/bodhi-landing/package.json
--------------------------------------------------

{
  "name": "bodhi-landing",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "lucide-react": "^0.325.0",
    "next": "^15.1.7",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-markdown": "^9.0.1",
    "react-syntax-highlighter": "^15.5.0",
    "remark-gfm": "^4.0.0"
  },
  "devDependencies": {
    "@types/node": "^20.11.0",
    "@types/react": "^18.2.0",
    "@types/react-dom": "^18.2.0",
    "@types/react-syntax-highlighter": "^15.5.13",
    "autoprefixer": "^10.0.1",
    "eslint": "^8.56.0",
    "eslint-config-next": "14.1.0",
    "postcss": "^8",
    "tailwindcss": "^3.4.1",
    "typescript": "^5.3.3"
  }
}


==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhi_bot/bodhi-landing/tsconfig.json
--------------------------------------------------

{
  "compilerOptions": {
       "target": "es2018",

    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}


==================================================


Documentation
==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhi_bot/bodhi-landing/README.md
--------------------------------------------------

This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.


==================================================

